import requests
from bs4 import BeautifulSoup
import mysql.connector
import psycopg2


def scan_service(service):
    ip = service['ip']
    port = service['port']
    base_url = service['base_url']
    service_type = service['service_type']
    # Get the username and password if existing
    username = service.get('username', '')
    password = service.get('password', '')

    # Construct URL to fetch version information
    url = f"https://{ip}:{port}/{base_url}"

    try:
        if service_type != 'MySQL' and service_type != 'PostgreSQL':
            response = requests.get(url)
            response.raise_for_status()

        # Parse HTML response to extract version information
        if service_type == 'WordPress':
            version = parse_wordpress_version(response.content)
        elif service_type == 'Apache':
            version = parse_apache_version(response.headers)
        elif service_type == 'MySQL':
            version = get_mysql_version(ip, port, username, password)
        elif service_type == 'PostgreSQL':
            version = get_postgresql_version(ip, port, username, password)
        else:
            version = "Unknown"

        return version

    except requests.RequestException as e:
        print(f"Error scanning {service_type} at {ip}:{port}: {e}")
        return None


def parse_wordpress_version(html_content):
    # Parse HTML content to extract WordPress version
    try:
        # Parse HTML content to extract WordPress version
        soup = BeautifulSoup(html_content, 'html.parser')
        version_tag = soup.find('meta', attrs={'name': 'generator'})
        if version_tag and 'WordPress' in version_tag['content']:
            version = version_tag['content'].replace('WordPress ', '')
            return version
        else:
            return "Unknown"
    except Exception as e:
        print(f"Error parsing WordPress version: {e}")
        return "Unknown"


def parse_apache_version(headers):
    # Extract Apache version from server header
    server_header = headers.get('Server', '')
    version = server_header.split('/')[-1].split(' ')[0] if server_header else "Unknown"
    return version


def get_mysql_version(host, port, user, password):
    try:
        cnx = mysql.connector.connect(user=user, password=password,
                                      host=host, port=port)
        cursor = cnx.cursor()
        cursor.execute("SELECT VERSION()")
        version = cursor.fetchone()[0]
        cnx.close()
        return version

    except mysql.connector.Error as err:
        print(f"Error retrieving MySQL version: {err}")
        return None


def get_postgresql_version(host, port, user, password):
    try:
        cnx = psycopg2.connect(user=user, password=password,
                               host=host, port=port, dbname='postgres')
        cursor = cnx.cursor()
        cursor.execute("SELECT version()")
        version_info = cursor.fetchone()[0]
        cnx.close()

        # Extract the version number from the version_info string
        version = version_info.split()[1]

        return version

    except psycopg2.Error as err:
        print(f"Error retrieving PostgreSQL version: {err}")
        return None